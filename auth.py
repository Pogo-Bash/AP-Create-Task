#This program is a very easy program with very basic encryption/decryption program that utilises a popular encryption  method from 100 BC used by Julius Ceaser know as the Ceaser cypher. It works by shifting every letter in the secret phrase by x number and has many variations.

#The program will have 3 main parts, the first part will be a interactive login page for the user to chose their application and decide to create an account or enter their credentials to proceed to the application. Part 2 will be a encryption / decryption program that will store credentials encrypted in credentials.txt. Part 3 will be a authenticator that will match credentials to allow access to your accounts

import time
import os
import getpass
import colorsys

# ASCII Art for the program generated by 
# https://www.asciiart.eu/text-to-ascii-art

application_art = """ 
  ____  ___   ___   ____ _     _____                   
 / ___|/ _ \ / _ \ / ___| |   | ____|                  
| |  _| | | | | | | |  _| |   |  _|                    
| |_| | |_| | |_| | |_| | |___| |___                   
 \____|\___/ \___/ \____|_____|_____|  _               
   / \  |  \/  |  / \   |__  / _ \| \ | |              
  / _ \ | |\/| | / _ \    / / | | |  \| |              
 / ___ \| |  | |/ ___ \  / /| |_| | |\  |              
/_/_ _\_\_|__|_/_/___\_\/____\___/|_| \_|  _    __  __ 
|_ _| \ | / ___|_   _|/ \  / ___|  _ \    / \  |  \/  |
 | ||  \| \___ \ | | / _ \| |  _| |_) |  / _ \ | |\/| |
 | || |\  |___) || |/ ___ \ |_| |  _ <  / ___ \| |  | |
|___|_| \_|____/ |_/_/   \_\____|_| \_\/_/   \_\_|  |_|
"""
google_art = """
  ____  ___   ___   ____ _     _____ 
 / ___|/ _ \ / _ \ / ___| |   | ____|
| |  _| | | | | | | |  _| |   |  _|  
| |_| | |_| | |_| | |_| | |___| |___ 
 \____|\___/ \___/ \____|_____|_____|
"""
amazon_art = """
    _    __  __    _     ________  _   _ 
   / \  |  \/  |  / \   |__  / _ \| \ | |
  / _ \ | |\/| | / _ \    / / | | |  \| |
 / ___ \| |  | |/ ___ \  / /| |_| | |\  |
/_/   \_\_|  |_/_/   \_\/____\___/|_| \_|
"""

instagram_art = """
 ___ _   _ ____ _____  _    ____ ____      _    __  __ 
|_ _| \ | / ___|_   _|/ \  / ___|  _ \    / \  |  \/  |
 | ||  \| \___ \ | | / _ \| |  _| |_) |  / _ \ | |\/| |
 | || |\  |___) || |/ ___ \ |_| |  _ <  / ___ \| |  | |
|___|_| \_|____/ |_/_/   \_\____|_| \_\/_/   \_\_|  |_|
"""
#check for credentials file if doesnt exist create it
path = './credentials.txt'
if os.path.isfile(path):
    pass
else:
    with open(path, 'x') as file:
        pass

# Function to start ui
def application():
    print(application_art)
    application = input("Please choose an application: ").lower()
    return application
#caesar cipher increment not named properly to make less obvious
sdfghj = 9

#caesar cipher implementation used chatgpt for logic
def caesar_cipher(passwordset):
    encrypted = ""
    
    for char in passwordset:
        if char.isalpha() or char.isnumeric():
            ascii_code = ord(char)
            
            if char.islower():
                shifted_ascii_code = (ascii_code - ord('a') + sdfghj) % 26 + ord('a')
            elif char.isupper():
                shifted_ascii_code = (ascii_code - ord('A') + sdfghj) % 26 + ord('A')
            else:
                shifted_ascii_code = (ascii_code - ord('0') + sdfghj) % 10 + ord('0')
            
            shifted_char = chr(shifted_ascii_code)
            
            encrypted += shifted_char
        else:
            encrypted += char
    
    return encrypted

    

#google application
def google():
    
    print(google_art)    

    creds_google = input("Enter 'y' if you have Google credentials, 'n' if you do not: ").lower()


#check if they have credentials 
    if creds_google == "y":
        clear_screen()
        print(google_art)
        print("Welcome back! Please enter your credentials")
      

    #saves file as variable list
        with open("credentials.txt", "r") as file:
            credentials_file = [line.strip().split(",") for line in file if line.strip()]


        # Check if the entered credentials match any stored credentials
        entered_username = input("Enter username: ")
        entered_password = getpass.getpass("Enter password: ")

        while not entered_username or not entered_password:
            print("Username and password cannot be empty. Please try again.")
            entered_username = input("Enter username: ")
            entered_password = input("Enter password: ")
        time.sleep(2)
        clear_screen()
        print(google_art)
        print("Validating credentials", end="")
        animate_loading()
        clear_screen()
        print(google_art)
        
        credentials_matched = False
        for credentials in credentials_file:
            if len(credentials) >= 4:  
                stored_username = credentials[0]
                stored_password = credentials[1]
                encrypt_type = credentials[2]
                site = credentials[3]
        
            ciphered_entered_password = caesar_cipher(entered_password)
        
            if entered_username == stored_username and ciphered_entered_password == stored_password and encrypt_type == "1" and site == "google":
                credentials_matched = True
                break
        
        if credentials_matched:
            print("Credentials matched.")
        else:
            print("Invalid credentials")    
                            
  
    elif creds_google == "n":
        clear_screen()
        print(google_art)
        print("Creating account", end="")
        animate_loading()
        clear_screen()
        print(google_art)
        
        userset = input("Please enter a username for your account: ")
        while not userset:
            print("Username cannot be empty. Please try again.")
            userset = input("Please enter a username for your account: ")
        
        passwordset = getpass.getpass("Please enter a password for your account: ")
        while not passwordset:
            print("Password cannot be empty. Please try again.")
            passwordset = getpass.getpass("Please enter a password for your account: ")
        
        encryption = input("How would you like your password encrypted? CaesarCipher(1): ")
        while encryption not in ["1"]:
            print("Invalid encryption method. Please try again.")
            encryption = input("How would you like your password encrypted? CaesarCipher(1): ")
        
        site = "google"
        if encryption == "1":
            encryptedpass = caesar_cipher(passwordset)
        #
#delete
        else:
            print("Invalid encryption method.")
            # Handle the error or exit the program if needed
    
        setpass_list = [userset, encryptedpass, encryption, site]
        with open("credentials.txt", "r+") as file:
            lines = file.readlines()
            if len(lines) >= 1000:
                print("Database full")
            else:
                file.write(",".join(setpass_list))
                file.write("\n")
                file.flush() 
                next = input("Would you like to sign in?")
                if next == "y" or next == "yes":
                    clear_screen()
                    login_main()
            
                    


    if creds_google not in ["y", "n"]:
        clear_screen()
        print(google_art)
        print("Invalid input")
        
        
   
        

        
        
def instagram():
    print(instagram_art)
    

    creds_instagram = input("Enter 'y' if you have Instagram credentials, 'n' if you do not: ").lower()

    
    if creds_instagram == "y":
        
        clear_screen()
        print(instagram_art)
        print("Welcome back! Please enter your credentials")
      

            # Briefly display the entered password for 2 seconds
            
        
            # Check if the entered credentials match any list in "credentials.txt"
        with open("credentials.txt", "r") as file:
            credentials_file = [line.strip().split(",") for line in file if line.strip()]


        # Check if the entered credentials match any stored credentials
        entered_username = input("Enter username: ")
        entered_password = getpass.getpass("Enter password: ")
        time.sleep(2)
        clear_screen()
        print(instagram_art)
        print("Validating credentials", end="")
        animate_loading()
        clear_screen()
        print(instagram_art)
        
        credentials_matched = False
        for credentials in credentials_file:
            if len(credentials) >= 4:  
                stored_username = credentials[0]
                stored_password = credentials[1]
                encrypt_type = credentials[2]
                site = credentials[3]
        
            ciphered_entered_password = caesar_cipher(entered_password)
        
            if entered_username == stored_username and ciphered_entered_password == stored_password and encrypt_type == "1" and site == "instagram":
                credentials_matched = True
                break
        
        if credentials_matched:
            print("Credentials matched.")
        else:
            print("Invalid credentials.")    
                            
  
    elif creds_instagram == "n":
        clear_screen()
        print(instagram_art)
        print("Creating Instagram account", end="")
        animate_loading()
        clear_screen()
        print(instagram_art)
        userset = input("Please enter a username for your Instagram account: ")
        passwordset = getpass.getpass("Please enter a password for your Instagram account: ")
        encryption = input("How would you like your password encrypted? CaesarCipher(1): ")
        site = "instagram"
        if encryption == "1":
            encryptedpass = caesar_cipher(passwordset)
        #
  
        else:
            print("Invalid encryption method.")
            # Handle the error or exit the program if needed
    
        setpass_list = [userset, encryptedpass, encryption, site]
        with open("credentials.txt", "r+") as file:
            lines = file.readlines()
            if len(lines) >= 1000:
                print("Database full")
            else:
                file.write(",".join(setpass_list))
                file.write("\n")
                file.flush()

                clear_screen()
                login_main()
            


    if creds_instagram not in ["y", "n"]:
        clear_screen()
        print(instagram_art)
        print("Invalid input")

def amazon():
    print(amazon_art)
    

    creds_amazon = input("Enter 'y' if you have amazon credentials, 'n' if you do not: ").lower()

    print(amazon_art)
    
    if creds_amazon == "y":
        clear_screen()
        print(amazon_art)
        print("Welcome back! Please enter your credentials")
        
      

            # Briefly display the entered password for 2 seconds
            
        
            # Check if the entered credentials match any list in "credentials.txt"
        with open("credentials.txt", "r") as file:
            credentials_file = [line.strip().split(",") for line in file if line.strip()]


        # Check if the entered credentials match any stored credentials
        entered_username = input("Enter username: ")
        entered_password = getpass.getpass("Enter password: ")
        time.sleep(2)
        clear_screen()
        print(amazon_art)
        print("Validating credentials", end="")
        animate_loading()
        clear_screen()
        print(amazon_art)
        
        credentials_matched = False
        for credentials in credentials_file:
            if len(credentials) >= 4:  
                stored_username = credentials[0]
                stored_password = credentials[1]
                encrypt_type = credentials[2]
                site = credentials[3]
        
            ciphered_entered_password = caesar_cipher(entered_password)
        
            if entered_username == stored_username and ciphered_entered_password == stored_password and encrypt_type == "1" and site == "amazon":
                credentials_matched = True
                break
        
        if credentials_matched:
            print("Credentials matched.")
        else:
            print("Invalid credentials.")    
                            
  
    elif creds_amazon == "n":
        clear_screen()
        print(amazon_art)
        print("Creating account", end="")
        animate_loading()
        clear_screen()
        print(amazon_art)
        userset = input("Please enter a username for your account: ")
        passwordset = getpass.getpass("Please enter a password for your account: ")
        encryption = input("How would you like your password encrypted? CaesarCipher(1): ")
        site = "amazon"
        if encryption == "1":
            encryptedpass = caesar_cipher(passwordset)
        #
#delete
        else:
            print("Invalid encryption method.")
            # Handle the error or exit the program if needed
    
        setpass_list = [userset, encryptedpass, encryption, site]
        with open("credentials.txt", "r+") as file:
            lines = file.readlines()
            if len(lines) >= 1000:
                print("Database full")
            else:
                file.write(",".join(setpass_list))
                file.write("\n")
                file.flush()
                clear_screen()
                if next == "y":
                    clear_screen()
                    login_main()
            
                
                    


    if creds_amazon not in ["y", "n"]:
        clear_screen()
        print(amazon_art)
        print("Invalid input")
        
        
   

def login_main():
    chosen_app = application()
    if chosen_app == "google":
        print("Loading Google", end="")
        animate_loading()
    elif chosen_app == "instagram":
        print("Loading Instagram", end="")
        animate_loading()
    elif chosen_app == "amazon":
        print("Loading Amazon", end="")
        animate_loading()
        
    else:
        print("Invalid application choice.")
    time.sleep(1)  
    clear_screen()  
    
    if chosen_app == "google":
        google()
    elif chosen_app == "instagram":
        instagram()
    elif chosen_app == "amazon":
        amazon()
    

    
    
    return chosen_app

def animate_loading():
    for _ in range(3):
        time.sleep(0.5)
        print(".", end="", flush=True)
    print()
    
def clear_screen():
    # Clear screen command for Windows
    if os.name == 'nt':
        _ = os.system('cls')
    # Clear screen command for Unix/Linux/MacOS
    else:
        _ = os.system('clear')

# Call the login_main function
login_main()